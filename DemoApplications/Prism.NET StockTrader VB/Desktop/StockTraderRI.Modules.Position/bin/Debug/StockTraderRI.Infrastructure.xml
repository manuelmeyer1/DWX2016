<?xml version="1.0"?>
<doc>
<assembly>
<name>
StockTraderRI.Infrastructure
</name>
</assembly>
<members>
<member name="M:StockTraderRI.Infrastructure.Behaviors.ReturnCommandBehavior.#ctor(System.Windows.Controls.TextBox)">
	<summary>
 Initializes a new instance of <see cref="T:StockTraderRI.Infrastructure.Behaviors.ReturnCommandBehavior"/>.
 </summary>
	<param name="textBox">The <see cref="T:System.Windows.Controls.TextBox"/> over which the <see cref="T:System.Windows.Input.ICommand"/> will work.</param>
</member><member name="F:StockTraderRI.Infrastructure.Behaviors.ReturnCommandBehavior._DefaultTextAfterCommandExecution">
	<summary>
 Gets or Sets the text which is set as water mark on the <see cref="T:System.Windows.Controls.TextBox"/>.
 </summary>
</member><member name="M:StockTraderRI.Infrastructure.Behaviors.ReturnCommandBehavior.KeyPressed(System.Windows.Input.Key)">
	<summary>
 Executes the <see cref="T:System.Windows.Input.ICommand"/> when <paramref name="key"/> is <see cref="F:System.Windows.Input.Key.Enter"/>.
 </summary>
	<param name="key">The key pressed on the <see cref="T:System.Windows.Controls.TextBox"/>.</param>
</member><member name="T:StockTraderRI.Infrastructure.Behaviors.ReturnCommandBehavior">
	<summary>
 Defines a behavior that executes a <see cref="T:System.Windows.Input.ICommand"/> when the Return key is pressed inside a <see cref="T:System.Windows.Controls.TextBox"/>.
 </summary>
	<remarks>This behavior also supports setting a basic watermark on the <see cref="T:System.Windows.Controls.TextBox"/>.</remarks>
</member><member name="P:My.Resources.Resources.ResourceManager">
	<summary>
   Returns the cached ResourceManager instance used by this class.
 </summary>
</member><member name="P:My.Resources.Resources.Culture">
	<summary>
   Overrides the current thread's CurrentUICulture property for all
   resource lookups using this strongly typed resource class.
 </summary>
</member><member name="P:My.Resources.Resources.CannotConvertFromTypeToEnum">
	<summary>
   Looks up a localized string similar to Cannot convert from type {0} to enum type {1}.  The source value must be a string type..
 </summary>
</member><member name="P:My.Resources.Resources.CannotConvertParameterToIntegerException">
	<summary>
   Looks up a localized string similar to The parameter should be convertible to an integer..
 </summary>
</member><member name="P:My.Resources.Resources.InvalidAttachedRegion">
	<summary>
   Looks up a localized string similar to Behavior cannot be attached to a null Region..
 </summary>
</member><member name="P:My.Resources.Resources.InvalidViewOnActivateViewOnFocusBehavior">
	<summary>
   Looks up a localized string similar to Cannot apply ActivateViewOnFocusBehavior to a Region that contains Views that are not UIElement..
 </summary>
</member><member name="P:My.Resources.Resources.SelectorExtensionCannotResolveMember">
	<summary>
   Looks up a localized string similar to The type {0} does not have a public property named '{1}'. The current implementation of '{2}' does not allow specifying a nested path or a member that is not a property..
 </summary>
</member><member name="T:My.Resources.Resources">
	<summary>
   A strongly-typed resource class, for looking up localized strings, etc.
 </summary>
</member><member name="F:StockTraderRI.Infrastructure.ReturnKey.CommandProperty">
	<summary>
 Command to execute on return key event.
 </summary>
</member><member name="F:StockTraderRI.Infrastructure.ReturnKey.DefaultTextAfterCommandExecutionProperty">
	<summary>
 Default text to set to the TextBox once the Command has been executed
 </summary>
</member><member name="M:StockTraderRI.Infrastructure.ReturnKey.SetDefaultTextAfterCommandExecution(System.Windows.Controls.TextBox,System.String)">
	<summary>
 Sets the <see cref="T:System.String"/> to set to the TextBox once the Command has been executed.
 </summary>
	<param name="textBox">TextBox dependency object on which the default text will be set after the Command has been executed.</param>
	<param name="defaultText">Default text to set.</param>
</member><member name="M:StockTraderRI.Infrastructure.ReturnKey.GetDefaultTextAfterCommandExecution(System.Windows.Controls.TextBox)">
	<summary>
 Retrieves the default text set to the <see cref="T:System.Windows.Controls.TextBox"/> after the Command has been executed.
 </summary>
	<param name="textBox">TextBox dependency object on which the default text will be set after the Command has been executed.</param>
	<returns>Default text to set.</returns>
</member><member name="M:StockTraderRI.Infrastructure.ReturnKey.SetCommand(System.Windows.Controls.TextBox,System.Windows.Input.ICommand)">
	<summary>
 Sets the <see cref="T:System.Windows.Input.ICommand"/> to execute on the return key event.
 </summary>
	<param name="textBox">TextBox dependency object to attach command</param>
	<param name="command">Command to attach</param>
</member><member name="M:StockTraderRI.Infrastructure.ReturnKey.GetCommand(System.Windows.Controls.TextBox)">
	<summary>
 Retrieves the <see cref="T:System.Windows.Input.ICommand"/> attached to the <see cref="T:System.Windows.Controls.TextBox"/>.
 </summary>
	<param name="textBox">TextBox containing the Command dependency property</param>
	<returns>The value of the command attached</returns>
</member><member name="M:StockTraderRI.Infrastructure.Behaviors.WindowWrapper.#ctor">
	<summary>
 Initializes a new instance of <see cref="T:StockTraderRI.Infrastructure.Behaviors.WindowWrapper"/>.
 </summary>
</member><member name="E:StockTraderRI.Infrastructure.Behaviors.WindowWrapper.Closed">
	<summary>
 Ocurrs when the <see cref="F:StockTraderRI.Infrastructure.Behaviors.WindowWrapper.window"/> is closed.
 </summary>
</member><member name="P:StockTraderRI.Infrastructure.Behaviors.WindowWrapper.Content">
	<summary>
 Gets or Sets the content for the <see cref="F:StockTraderRI.Infrastructure.Behaviors.WindowWrapper.window"/>.
 </summary>
</member><member name="P:StockTraderRI.Infrastructure.Behaviors.WindowWrapper.Owner">
	<summary>
 Gets or Sets the <see cref="P:System.Windows.Window.Owner"/> control of the <see cref="F:StockTraderRI.Infrastructure.Behaviors.WindowWrapper.window"/>.
 </summary>
</member><member name="P:StockTraderRI.Infrastructure.Behaviors.WindowWrapper.Style">
	<summary>
 Gets or Sets the <see cref="P:System.Windows.FrameworkElement.Style"/> to apply to the <see cref="F:StockTraderRI.Infrastructure.Behaviors.WindowWrapper.window"/>.
 </summary>
</member><member name="M:StockTraderRI.Infrastructure.Behaviors.WindowWrapper.Show">
	<summary>
 Opens the <see cref="F:StockTraderRI.Infrastructure.Behaviors.WindowWrapper.window"/>.
 </summary>
</member><member name="M:StockTraderRI.Infrastructure.Behaviors.WindowWrapper.Close">
	<summary>
 Closes the <see cref="F:StockTraderRI.Infrastructure.Behaviors.WindowWrapper.window"/>.
 </summary>
</member><member name="T:StockTraderRI.Infrastructure.Behaviors.WindowWrapper">
	<summary>
 Defines a wrapper for the <see cref="T:System.Windows.Window"/> class that implements the <see cref="T:StockTraderRI.Infrastructure.Behaviors.IWindow"/> interface.
 </summary>
</member><member name="F:StockTraderRI.Infrastructure.Behaviors.RegionPopupBehaviors.CreatePopupRegionWithNameProperty">
	<summary>
 The name of the Popup <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
 </summary>
</member><member name="F:StockTraderRI.Infrastructure.Behaviors.RegionPopupBehaviors.ContainerWindowStyleProperty">
	<summary>
 The <see cref="T:System.Windows.Style"/> to set to the Popup.
 </summary>
</member><member name="M:StockTraderRI.Infrastructure.Behaviors.RegionPopupBehaviors.GetCreatePopupRegionWithName(System.Windows.DependencyObject)">
	<summary>
 Gets the name of the Popup <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
 </summary>
	<param name="owner">Owner of the Popup.</param>
	<returns>The name of the Popup <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.</returns>
</member><member name="M:StockTraderRI.Infrastructure.Behaviors.RegionPopupBehaviors.SetCreatePopupRegionWithName(System.Windows.DependencyObject,System.String)">
	<summary>
 Sets the name of the Popup <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
 </summary>
	<param name="owner">Owner of the Popup.</param>
	<param name="value">Name of the Popup <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.</param>
</member><member name="M:StockTraderRI.Infrastructure.Behaviors.RegionPopupBehaviors.GetContainerWindowStyle(System.Windows.DependencyObject)">
	<summary>
 Gets the <see cref="T:System.Windows.Style"/> for the Popup.
 </summary>
	<param name="owner">Owner of the Popup.</param>
	<returns>The <see cref="T:System.Windows.Style"/> for the Popup.</returns>
</member><member name="M:StockTraderRI.Infrastructure.Behaviors.RegionPopupBehaviors.SetContainerWindowStyle(System.Windows.DependencyObject,System.Windows.Style)">
	<summary>
 Sets the <see cref="T:System.Windows.Style"/> for the Popup.
 </summary>
	<param name="owner">Owner of the Popup.</param>
	<param name="style"><see cref="T:System.Windows.Style"/> for the Popup.</param>
</member><member name="M:StockTraderRI.Infrastructure.Behaviors.RegionPopupBehaviors.RegisterNewPopupRegion(System.Windows.DependencyObject,System.String)">
	<summary>
 Creates a new <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> and registers it in the default <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/>
 attaching to it a <see cref="T:StockTraderRI.Infrastructure.Behaviors.DialogActivationBehavior"/> behavior.
 </summary>
	<param name="owner">The owner of the Popup.</param>
	<param name="regionName">The name of the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.</param>
	<remarks>
 This method would typically not be called directly, instead the behavior 
 should be set through the Attached Property <see cref="F:StockTraderRI.Infrastructure.Behaviors.RegionPopupBehaviors.CreatePopupRegionWithNameProperty"/>.
 </remarks>
</member><member name="T:StockTraderRI.Infrastructure.Behaviors.RegionPopupBehaviors">
	<summary>
 Declares the Attached Properties and Behaviors for implementing Popup regions.
 </summary>
	<remarks>
 Although the fastest way is to create a RegionAdapter for a Window and register it with the RegionAdapterMappings,
 this would be conceptually incorrect because we want to create a new popup window everytime a view is added 
 (instead of having a Window as a host control and replacing its contents everytime Views are added, as other adapters do).
 This is why we have a different class for this behavior, instead of reusing the <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionNameProperty"/> attached property.
 </remarks>
</member><member name="M:StockTraderRI.Infrastructure.Behaviors.WindowDialogActivationBehavior.CreateWindow">
	<summary>
 Creates a wrapper for the WPF <see cref="T:System.Windows.Window"/>.
 </summary>
	<returns>Instance of the <see cref="T:System.Windows.Window"/> wrapper.</returns>
</member><member name="T:StockTraderRI.Infrastructure.Behaviors.WindowDialogActivationBehavior">
	<summary>
 Specifies the <see cref="T:StockTraderRI.Infrastructure.Behaviors.DialogActivationBehavior"/> class for using the behavior on WPF.
 </summary>
</member><member name="T:StockTraderRI.Infrastructure.Interfaces.IHeaderInfoProvider`1">
	<summary>
 Provides an easy way to recognize a class that exposes a HeaderInfo that can be used to bind to a header from XAML.
 </summary>
	<typeparam name="T">The HeaderInfo type</typeparam>
</member><member name="E:StockTraderRI.Infrastructure.Behaviors.IWindow.Closed">
	<summary>
 Ocurrs when the <see cref="T:StockTraderRI.Infrastructure.Behaviors.IWindow"/> is closed.
 </summary>
</member><member name="P:StockTraderRI.Infrastructure.Behaviors.IWindow.Content">
	<summary>
 Gets or sets the content for the <see cref="T:StockTraderRI.Infrastructure.Behaviors.IWindow"/>.
 </summary>
</member><member name="P:StockTraderRI.Infrastructure.Behaviors.IWindow.Owner">
	<summary>
 Gets or sets the owner control of the <see cref="T:StockTraderRI.Infrastructure.Behaviors.IWindow"/>.
 </summary>
</member><member name="P:StockTraderRI.Infrastructure.Behaviors.IWindow.Style">
	<summary>
 Gets or sets the <see cref="T:System.Windows.Style"/> to apply to the <see cref="T:StockTraderRI.Infrastructure.Behaviors.IWindow"/>.
 </summary>
</member><member name="M:StockTraderRI.Infrastructure.Behaviors.IWindow.Show">
	<summary>
 Opens the <see cref="T:StockTraderRI.Infrastructure.Behaviors.IWindow"/>.
 </summary>
</member><member name="M:StockTraderRI.Infrastructure.Behaviors.IWindow.Close">
	<summary>
 Closes the <see cref="T:StockTraderRI.Infrastructure.Behaviors.IWindow"/>.
 </summary>
</member><member name="T:StockTraderRI.Infrastructure.Behaviors.IWindow">
	<summary>
 Defines the interface for the Dialogs that are shown by <see cref="T:StockTraderRI.Infrastructure.Behaviors.DialogActivationBehavior"/>.
 </summary>
</member><member name="M:StockTraderRI.Infrastructure.TreeHelper.FindAncestor(System.Windows.DependencyObject,System.Func{System.Windows.DependencyObject,System.Boolean})">
	<summary>
 Traverses the Visual Tree upwards looking for the ancestor that satisfies the <paramref name="predicate"/>.
 </summary>
	<param name="dependencyObject">The element for which the ancestor is being looked for.</param>
	<param name="predicate">The predicate that evaluates if an element is the ancestor that is being looked for.</param>
	<returns>
 The ancestor element that matches the <paramref name="predicate"/> or <see langword="null"/>
 if the ancestor was not found.
 </returns>
</member><member name="T:StockTraderRI.Infrastructure.TreeHelper">
	<summary>
 Helper class used to traverse the Visual Tree.
 </summary>
</member><member name="F:StockTraderRI.Infrastructure.Behaviors.DialogActivationBehavior.BehaviorKey">
	<summary>
 The key of this behavior
 </summary>
</member><member name="F:StockTraderRI.Infrastructure.Behaviors.DialogActivationBehavior._HostControl">
	<summary>
 Gets or sets the that the is attached to.
 </summary>
	<remarks>A  that the is attached to.
 This is usually a that is part of the tree.</remarks>
</member><member name="M:StockTraderRI.Infrastructure.Behaviors.DialogActivationBehavior.OnAttach">
	<summary>
 Performs the logic after the behavior has been attached.
 </summary>
</member><member name="M:StockTraderRI.Infrastructure.Behaviors.DialogActivationBehavior.CreateWindow">
	<summary>
 Override this method to create an instance of the <see cref="T:StockTraderRI.Infrastructure.Behaviors.IWindow"/> that 
 will be shown when a view is activated.
 </summary>
	<returns>
 An instance of <see cref="T:StockTraderRI.Infrastructure.Behaviors.IWindow"/> that will be shown when a 
 view is activated on the target <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
 </returns>
</member><member name="T:StockTraderRI.Infrastructure.Behaviors.DialogActivationBehavior">
	<summary>
 Defines a behavior that creates a Dialog to display the active view of the target <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
 </summary>
</member>
</members>
</doc>